# –•—ç–Ω–¥–ª–µ—Ä –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞-—Ç—Ä–∏–≥–≥–µ—Ä—ã

from pyrogram import filters
from config import pipabot, chance, big_chance, rare_chance

import random
import asyncio

from utils.spooky import spooky_message



@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–¥–î][–∞–ê]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=1)
async def check_da(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´–ü–ò–ó–î–ê¬ª –Ω–∞ ¬´–î–ê¬ª'''
    
    if random.random() < chance:
        await message.reply_text(text='–ü–ò–ó–î–ê', quote_text=message.matches[0].group(0))


@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–Ω–ù][–µ–ï][—Ç–¢]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=2)
async def check_net(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´–ì–û–ú–û–°–ï–ö–°–£–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢¬ª –Ω–∞ ¬´–ù–ï–¢¬ª'''
    
    if random.random() < chance:
        await message.reply_text(text='–ì–û–ú–û–°–ï–ö–°–£–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢', quote_text=message.matches[0].group(0))
        
        
@pipabot.on_message(
    filters=(
        filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[—Ö–•hH][–∞–ê–µ–ïaAeE][—Ö–•hH][–∞–ê–µ–ïaAeE]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)') 
        | filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[—Ö–•hH][–∞–ê–µ–ïaAeE] [—Ö–•hH][–∞–ê–µ–ïaAeE]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)')),
    group=3)
async def check_haha(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´BENIS¬ª –Ω–∞ ¬´–•–ï–•–ï¬ª'''
    
    await message.reply_text(text='BENIS', quote_text=message.matches[0].group(0))
    
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[—É–£][—Ç–¢][—Ä–†][–æ–û]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=4)
async def check_utro(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´–•–£–Æ–¢–†–û¬ª –Ω–∞ ¬´–£–¢–†–û¬ª'''
    
    if random.random() < big_chance:
        await message.reply_text(text='–•–£–Æ–¢–†–û', quote_text=message.matches[0].group(0))
            
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–ø–üpP][–∏–òiI][–ø–üpP][–∞–ê—ã–´—É–£aA]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=5)
async def check_pipa(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´PIPA¬ª –Ω–∞ ¬´–ü–ò–ü–ê¬ª'''
    
    await message.reply_text(text='PIPA', quote_text=message.matches[0].group(0))  
        
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–ø–ü][–∏–ò][–∑–ó][–¥–î][–∞–ê]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=6)
async def check_pizda(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´–î–ê¬ª –Ω–∞ ¬´–ü–ò–ó–î–ê¬ª'''
    
    if random.random() < chance:
        await message.reply_text(text='–î–ê', quote_text=message.matches[0].group(0))   
            
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[—Ö–•][—É–£][–π–ô][–Ω–ù][—è–Ø]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=7)
async def check_huynya(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´–°–ê–ú –¢–ê–ö–û–ô¬ª –Ω–∞ ¬´–•–£–ô–ù–Ø¬ª'''
    
    if random.random() < big_chance:
        await message.reply_text(text='–°–ê–ú –¢–ê–ö–û–ô', quote_text=message.matches[0].group(0))   
            
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[—Å–°][–µ,–ï][–∫–ö][—Å–°]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=8)
async def check_seks(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä–æ–º —Å –ü–æ–¥–Ω–µ–±–µ—Å–Ω—ã–º –Ω–∞ ¬´–°–ï–ö–°¬ª'''
    
    if random.random() < big_chance:  
        await message.reply_sticker(
            sticker='CAACAgIAAx0CX9oyXQABBzs7ZRV5LVCgtuDLu6dyQiL_yy64xYAAAlYxAALrvNhJA7YZxBeOmCUeBA',
            quote_text=message.matches[0].group(0)
        )
    
    
@pipabot.on_message(
    filters=filters.regex('[–∫–ö][–≤–í][–∞–ê][—Å–°]'), 
    group=9)
async def check_kvas(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –≥–∏—Ñ–∫–æ–π —Å –ø–∏–≤–æ–º –Ω–∞ ¬´–ö–í–ê–°¬ª'''
    
    await message.reply_animation(
        animation='CgACAgQAAx0CX9oyXQABCWmFZWEAAYaXf6qCwYhWGUwLK4n8SxwrAALQAwACsJcUUsyHX0ivKs-pHgQ', 
        quote_text=message.matches[0].group(0)
    )
    
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–ø,–ü][—É–£][–∫–ö]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=10)
async def check_puk(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç ¬´–ü–£–ö¬ª –Ω–∞ ¬´–ü–£–ö¬ª'''
    
    if random.random() < chance:  
        await message.reply_text(text='–ü–£–ö –ü–£–ö')    
    elif random.random() < chance:
        await message.reply_text(text='–°–†–ï–ù–¨–ö')    
    elif random.random() < rare_chance:
        await message.reply_animation(
            animation='CgACAgIAAx0CX9oyXQABCVrIZV9VMwHWMEvPkswUH7z6Qxm-3kIAAmI2AAIkTAFL0i_g8g3_Fk4eBA',
            quote_text=message.matches[0].group(0)
        )
    else:
        await message.reply_text(text='–ü–£–ö')    
    
    
@pipabot.on_message(
    filters=filters.command('start'), 
    group=11)
async def check_start(client, message):
    '''–ò–∑—è—â–Ω–æ –ø–µ—Ä–µ–∫–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´START¬ª'''
    
    await message.reply_text(text='–ù–ê –°–¢–ê–†–¢')    
    await asyncio.sleep(3)
    await message.reply_text(text='–í–ù–ò–ú–ê–ù–ò–ï!', quote=False)   
    await asyncio.sleep(3)
    await message.reply_sticker(
        sticker='CAACAgIAAxkBAAMMZR6d6qTQXA54N7Amk3OsyZbRdQYAAqsUAAJWY9FL9pD3iqax64UeBA', 
        quote=False
    )
    
    
@pipabot.on_message(
    filters=filters.regex('[—Ö–•][–∞–ê][–ª–õ][—Å–°][–∏–ò][–Ω–ù]') | filters.regex('[—Ö–•][–∞–ê][–ª–õ][—å–¨][—Å–°][–∏–ò][–Ω–ù]'), 
    group=12)
async def check_halsin(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ¬´–•–ê–õ–°–ò–ù¬ª'''
    
    texts = ['–ú–û–ô –õ–Æ–ë–ò–ú–´–ô –ú–ò–®–ö–ê üß∏', '–•–ê–õ–¨–°–ò–ù–ß–ò–ö üëâüëà', '–•–ê–õ–¨–°–ò–ù –¢-–¢-–¢-–¢-–¢-–¢–†–ê–•–ê–¢–¨ üêªüêªüêª']
    text = random.choice(texts)
    await message.reply_text(text=text, quote_text=message.matches[0].group(0))
    
    
@pipabot.on_message(
    filters=filters.regex('[–¥–î][—É–£][–º–ú][–∞–ê][–ª–õ—Ç–¢—é–Æ–µ–ï]'), 
    group=13)
async def check_dumaem(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –≥–∏—Ñ–∫–æ–π ¬´–î–£–ú–ê–ï–ú¬ª –Ω–∞ ¬´–î–£–ú–ê–Æ¬ª'''
    
    if random.random() < rare_chance:  
        await message.reply_animation(
            animation='CgACAgIAAxkBAAIGU2Uidj3DNHsCX9nfcSkouc7pEyRaAALdKwACUhPwSaMHg0aOsJqGHgQ', 
            quote_text=message.matches[0].group(0)
        )
        
        
@pipabot.on_message(
    filters=filters.regex('[—Å–°][–ø,–ü][—É–£][–∫–ö][–∏–ò]') | filters.regex('[sS][pP][oO][oO][kK][yY]'), 
    group=14)
async def check_spooky(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –≥–∏—Ñ–∫–æ–π ¬´–°–ü–£–ö–ò¬ª –Ω–∞ ¬´–°–ü–£–ö–ò¬ª'''
    
    await message.reply_animation(
        animation='CgACAgQAAxkBAAIHEGUio6KkdJBP_pmt68QLI9Vv3sZrAALuAgACN5ANUyMp7ayFOkCeHgQ', 
        quote_text=message.matches[0].group(0)
    )
    
    
@pipabot.on_message(
    filters=filters.regex('[—Ç–¢][—Ä–†][–∞–ê][—Ö–•][–∞–ê][—Ç–¢][—å–¨]') & ~filters.regex('[—Å–°][–µ–ï][–∫–ö][—Å–°]'), 
    group=15)
async def check_trah(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –≥–∏—Ñ–∫–æ–π ¬´–¢–†–ê–•–ê–¢–¨¬ª –Ω–∞ ¬´–¢–†–ê–•–ê–¢–¨¬ª'''
    
    await message.reply_animation(
        animation='CgACAgIAAxkBAAIH_WUlCgvTwwRQB0il74UF0wSjAAGhhQACgjQAAoB-KUn0xaf3T4n8dB4E', 
        quote_text=message.matches[0].group(0)
    )
    
    
@pipabot.on_message(
    filters=filters.regex('–¥–ª–∏–Ω–∞ –º–æ–µ–≥–æ —á–ª–µ–Ω–∞'), 
    group=16)
async def check_penis_benis(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ¬´–¥–ª–∏–Ω–∞ –º–æ–µ–≥–æ —á–ª–µ–Ω–∞¬ª'''
    
    await message.reply_text(text='–Ø –¢–Ø –Å–ë–ù–£')
    
    
@pipabot.on_message(
    filters=filters.regex('[–ø–ü]–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Ç[–µ–ï—ë–Å]–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É'), 
    group=17)
async def check_dark_side(client, message):
    '''–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Ç—ë–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É'''
    
    await message.reply_animation(animation='CgACAgQAAxkBAAIIhWUlazYj4TSmtnsslq0hqblnF6n3AALYAgACOaZMU9mD7HoUBWPoHgQ')
    await message.reply_audio(audio='CQACAgIAAxkBAAIIkGUla6GrlRWZnznz5Zjur-0uhJaRAAKEOQACYvEpSdoMKvqfVWIGHgQ', quote=False)
    

@pipabot.on_message(group=18)
async def check_hit(client, message):
    '''–ü–æ–ª—É—á–∞–µ—Ç –±–æ–ª—å'''
    
    if message.sticker and str(message.sticker.file_unique_id) == 'AgADmC0AAvkuqEg':
        await message.reply_text(text='–ê–ô(')
        

@pipabot.on_message(
    filters=filters.regex('^–°–ú–ï–†–¢–ë$'), 
    group=19)
async def check_smertb(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ¬´–°–ú–ï–†–¢–ë¬ª —Å–ø–∏—Å–∫–æ–º —Ö—ç–ª–ª–æ—É–∏–Ω–æ–≤—Å–∫–∏—Ö —Ñ—Ä–∞–∑'''
    
    text = (spooky_message().upper())
    await message.reply_text(text=text)
    

@pipabot.on_message(
    filters=filters.regex('[–º–ú][–∞–ê][—Å–°][—Ç–¢][–µ–ï][—Ä–†]'), 
    group=20)
async def check_master(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ¬´–ú–ê–°–¢–ï–†¬ª'''
    
    await message.reply_text(text='–î–ê–ù–ñ–ï–ù –ú–ê–°–¢–ï–†', quote_text=message.matches[0].group(0))
    await asyncio.sleep(3)
    await message.reply_text(text='SLAAAAAAVES', quote_text=message.matches[0].group(0))
    
    
@pipabot.on_message(
    filters=filters.regex('[–∞–ê][—Å–°][—Ç–¢][–∞–ê][—Ä–†][–∏–ò][–æ–û][–Ω–ù]'), 
    group=21)
async def check_astarion(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ¬´–ê–°–¢–ê–†–ò–û–ù¬ª'''
    
    await message.reply_text(text='–í–û–¢ –ë–´ –•–£–ô –ú–ù–ï –í–°–¢–ê–í–ò–õ –û–ù', quote_text=message.matches[0].group(0))
    
    
@pipabot.on_message(
    filters=filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–∫–ö][–≤–í][–∞–ê]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)'), 
    group=22)
async def check_kva(client, message):
    '''–û—Ç–≤–µ—á–∞–µ—Ç –≥–∏—Ñ–∫–æ–π —Å –∂–∞–±–æ–π –Ω–∞ ¬´–ö–í–ê¬ª'''
    
    await message.reply_animation(
        animation='CgACAgQAAx0CX9oyXQABCWm0ZWEDhh79ExGdmolERrrvNLzm_1QAAswCAAIn7A1TNYVJlisMcv0eBA', 
        quote_text=message.matches[0].group(0)
    )