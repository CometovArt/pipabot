# –•—ç–Ω–¥–ª–µ—Ä –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ —Å —à—É—Ç–∫–∞–º–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

from pyrogram import filters
from config import pipabot, chance, rare_chance

import random
import asyncio

from utils.jokes.kvn import get_kvn, get_kvn_pro, get_kvn_juri
from utils.jokes.pastas import get_pasta, get_pasta_pro
from utils.jokes.anekdots import get_anek, get_anek_pro
        
        
        
@pipabot.on_message(
    filters=(
        filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–ø,–ü][–∞,–ê][—Å,–°][—Ç,–¢][–∞,–ê,—É,–£]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)') 
        & ~filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–ø,–ü][—Ä,–†][–æ,–û]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)')), 
    group=201)
async def check_pasta(client, message):
    '''–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–∞—Å—Ç—É, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ ¬´–ø–∞—Å—Ç–∞¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ê–ù–ï–ö–î–û–¢–´')
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Å—Ç—É
    pasta = await get_pasta()
    await message.reply_text(text=pasta.upper())
            
            
@pipabot.on_message(
    filters=filters.regex('^[–ø,–ü][–∞,–ê][—Å,–°][—Ç,–¢][–∞,–ê,—É,–£] [–ø,–ü][—Ä,–†][–æ,–û]'), 
    group=202)
async def check_pasta_pro(client, message):
    '''–ò—â–µ—Ç –ø–∞—Å—Ç—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤ ¬´–ø–∞—Å—Ç–∞ –ø—Ä–æ¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ê–ù–ï–ö–î–û–¢–´')
        return

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    result = message.text.split(' ')
    pasta_result = ' '.join(result[2:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Å—Ç—É
    pasta = await get_pasta_pro(pasta_result)
    await message.reply_text(text=pasta.upper())
        
        
@pipabot.on_message(
    filters=filters.regex('^[–ø,–ü,p,P][–∏,–ò,i,I][–ø,–ü,p,P][–∞,–ê,—ã,–´,—É,–£,a,A] [–ø,–ü][–∞,–ê][—Å,–°][—Ç,–¢][–∞,–ê,—É,–£] [–ø,–ü][—Ä,–†][–æ,–û]'), 
    group=203)
async def check_pasta_pipa_pro(client, message):
    '''–ò—â–µ—Ç –ø–∞—Å—Ç—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤ ¬´–ø–∏–ø–∞ –ø–∞—Å—Ç–∞ –ø—Ä–æ¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ê–ù–ï–ö–î–û–¢–´')
        return
        
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    result = message.text.split(' ')
    pasta_result = ' '.join(result[3:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Å—Ç—É
    pasta = await get_pasta_pro(pasta_result)
    await message.reply_text(text=pasta.upper())
    
    
    
@pipabot.on_message(
    filters=(
        filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–∞,–ê][–Ω,–ù][–µ,–ï][–∫,–ö][–¥,–î][–æ,–û][—Ç,–¢]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)') 
        & ~filters.regex('(?:^|(?![–∞-—è—ë–ê–Ø–Å])\W)' + '[–ø,–ü][—Ä,–†][–æ,–û]' + '(?=(?![–∞-—è—ë–ê–Ø–Å])\\W|$)')), 
    group=204)
async def check_anek(client, message):
    '''–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ ¬´–∞–Ω–µ–∫–¥–æ—Ç¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ê–ù–ï–ö–î–û–¢–´')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
    anek = await get_anek()
    await message.reply_text(text=anek.upper())
    
    
@pipabot.on_message(
    filters=filters.regex('^[–∞,–ê][–Ω,–ù][–µ,–ï][–∫,–ö][–¥,–î][–æ,–û][—Ç,–¢] [–ø,–ü][—Ä,–†][–æ,–û]'), 
    group=205)
async def check_anek_pro(client, message):
    '''–ò—â–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤ ¬´–∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ê–ù–ï–ö–î–û–¢–´')
        return
    
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    result = message.text.split(' ')
    anek_result = ' '.join(result[2:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
    anek = await get_anek_pro(anek_result)
    await message.reply_text(text=anek.upper())
        
        
@pipabot.on_message(
    filters=filters.regex('^[–ø,–ü,p,P][–∏,–ò,i,I][–ø,–ü,p,P][–∞,–ê,—ã,–´,—É,–£,a,A] [–∞,–ê][–Ω,–ù][–µ,–ï][–∫,–ö][–¥,–î][–æ,–û][—Ç,–¢] [–ø,–ü][—Ä,–†][–æ,–û]'), 
    group=206)
async def check_anek_pipa_pro(client, message):
    '''–ò—â–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤ ¬´–ø–∏–ø–∞ –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ê–ù–ï–ö–î–û–¢–´')
        return
    
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    result = message.text.split(' ')
    anek_result = ' '.join(result[3:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç
    anek = await get_anek_pro(anek_result)
    await message.reply_text(text=anek.upper())
        
        
@pipabot.on_message(
    filters=(
        filters.regex('[–º,–ú][—ã,–´] [–Ω,–ù][–∞,–ê][—á,–ß][–∏,–ò][–Ω,–ù][–∞,–ê][–µ,–ï][–º,–ú] [–∫,–ö][–≤,–í][–Ω,–ù]')), 
    group=207)
async def check_start_kvn(client, message):
    '''–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–≤–Ω, –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å ¬´–º—ã –Ω–∞—á–∏–Ω–∞–µ–º –∫–≤–Ω¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ö–ê–í–≠–≠–ù–´')
        return
    
    if random.random() < chance:
        await message.reply_text(text='–î–õ–Ø –ö–û–ì–û')
        await asyncio.sleep(1)
        await message.reply_text(text='–î–õ–Ø –ß–ï–ì–û', quote=False)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–Ω
    title, joke = await get_kvn()
    kvn = joke + '\n\n' f'**{title}**'
    await message.reply_text(text=kvn.upper())
    
    
@pipabot.on_message(
    filters=filters.regex('^[–∫,–ö][–≤,–í][–Ω,–ù] [–ø,–ü][—Ä,–†][–æ,–û]'), 
    group=209)
async def check_kvn_pro(client, message):
    '''–ò—â–µ—Ç –∫–≤–Ω, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤ ¬´–∫–≤–Ω –ø—Ä–æ¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ö–ê–í–≠–≠–ù–´')
        return
    
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    result = message.text.split(' ')
    kvn_result = ' '.join(result[2:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–Ω
    title, joke = await get_kvn_pro(kvn_result)
    kvn = joke + '\n\n' f'**{title}**'
    await message.reply_text(text=kvn.upper())
        
        
@pipabot.on_message(
    filters=filters.regex('^[–ø,–ü,p,P][–∏,–ò,i,I][–ø,–ü,p,P][–∞,–ê,—ã,–´,—É,–£,a,A] [–∫,–ö][–≤,–í][–Ω,–ù] [–ø,–ü][—Ä,–†][–æ,–û]'), 
    group=209)
async def check_kvn_pipa_pro(client, message):
    '''–ò—â–µ—Ç –∫–≤–Ω, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–æ–≤ ¬´–ø–∏–ø–∞ –∫–≤–Ω –ø—Ä–æ¬ª'''
    
    # –° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏
    if random.random() < rare_chance:  
        await help_message(client, message, type_joke='–ö–ê–í–≠–≠–ù–´')
        return
    
    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    result = message.text.split(' ')
    kvn_result = ' '.join(result[3:])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–≤–Ω
    title, joke = await get_kvn_pro(kvn_result)
    kvn = joke + '\n\n' f'**{title}**'
    await message.reply_text(text=kvn.upper())
        
        
@pipabot.on_message(
    filters=filters.voice, 
    group=211)
async def check_kvn_juri(client, message):
    '''–° –Ω–µ–±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–æ–π –∂—é—Ä–∏'''
    
    if random.random() < rare_chance:  
        kvn = await get_kvn_juri()
        await message.reply_text(text=kvn.upper())
        
        
async def help_message(client, message, type_joke):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª—å–±–æ–π –æ –ø–æ–º–æ—â–∏'''
    
    await message.reply_text(text=f'–•–í–ê–¢–ò–¢ –ü–†–û–°–ò–¢–¨ {type_joke}, –Ø –°–ê–ú –°–ö–û–†–û –°–î–û–•–ù–£ –û–¢ –ù–ò–• üíÄ')
    await asyncio.sleep(1)
    await message.reply_text(text='–≠–¢–û –ñ –ö–†–ò–ù–ñ –ü–ò–ó–î–ï–¶', quote=False)
    await asyncio.sleep(1)
    await message.reply_text(text='–°–ê–®–ê–ê–ê–ê–ê–ê–ê–ê –ü–û–ú–û–ì–ò üò´üò´üò´üò´üò´üò´', quote=False)