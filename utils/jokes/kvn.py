# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–≤–Ω–∞

from aiohttp import ClientSession
from bs4 import BeautifulSoup
import sqlite3 as sl
import random
import re

from config import morph



async def get_kvn_juri():
    '''–ü–∞—Ä—Å–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–ø–ª–∏–∫—É –∂—é—Ä–∏ —Å —Å–∞–π—Ç–∞ kvnru.ru'''
    
    # kvnru.ru/txt.php –ø—Ä—è–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É, 
    # –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤—ã—Ç–∞—Å–∫–∏–µ–º –¥–∏–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
    async with ClientSession(trust_env=True) as session:
        async with session.get("http://kvnru.ru/txt.php", ssl=False) as response:
            html = await response.text()
            soup = BeautifulSoup(html, "lxml")
            p_tag = soup.find('p')
            
    return p_tag.get_text()
        
        
async def get_kvn():
    '''–ü–∞—Ä—Å–∏—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–≤–Ω–æ–≤—Å–∫—É—é —à—É—Ç–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'''
    # –í—Å–µ —à—É—Ç–∫–∏ –±—ã–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Ä—à–µ–Ω—ã —Å —Å–∞–π—Ç–∞ https://kvn.ru/jokes
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sl.connect('./service/pipa.db')
    cur = conn.cursor()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–π, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –∏—Ö
    cur.execute("""SELECT joke_id FROM kvn ORDER BY joke_id DESC LIMIT 1""")
    result_joke_id, = cur.fetchone()

    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —à—É—Ç–∫–æ–π
    random_number = random.randint(1, result_joke_id)

    # –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —à—É—Ç–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cur.execute("""SELECT * FROM kvn WHERE joke_id = ?""",(random_number,))
    result_joke = cur.fetchone()
    joke_id,title,joke = result_joke
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()
    
    return title, joke


async def get_kvn_pro(kvn_result):
    '''–ò—â–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–≤–Ω–æ–≤—Å–∫—É—é —à—É—Ç–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É —é–∑–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'''
    # –í—Å–µ —à—É—Ç–∫–∏ –±—ã–ª–∏ –∑–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Ä—à–µ–Ω—ã —Å —Å–∞–π—Ç–∞ https://kvn.ru/jokes
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sl.connect('./service/pipa.db')
    cur = conn.cursor()
    
    # –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
    cur.execute("""SELECT * FROM kvn""")
    result_kvn = cur.fetchall()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.close()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Å–∫–ª–æ–Ω–µ–Ω–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    try:
        words = [kvn_result]
        
        morphs = [
            morph.parse(kvn_result)[0].normal_form,
            morph.parse(kvn_result)[0].inflect({'gent'}).word,
            morph.parse(kvn_result)[0].inflect({'datv'}).word,
            morph.parse(kvn_result)[0].inflect({'accs'}).word,
            morph.parse(kvn_result)[0].inflect({'ablt'}).word,
            morph.parse(kvn_result)[0].inflect({'loct'}).word,
            kvn_result[:-1]
        ]
        
        for word in morphs:
            if word not in words:
                words.append(word)
                
    except AttributeError:
        words = [kvn_result]
        
    # –ü—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º, –ø—Ä–æ–≤–µ—Ä—è—è –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ –∫–∞–∂–¥–æ–π —à—É—Ç–∫–µ
    joke_list = []
    for word in words:

        for result_joke in result_kvn:
            joke_id,title,joke = result_joke
            
            result = re.search(word, joke.lower())
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à—É—Ç–∫–æ–π, —Ç–æ –ø–∏—Ö–∞–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫
            if result:
                joke_list.append(result_joke)
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —à—É—Ç–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π, —Ç–æ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if joke_list != []:
        choice_joke = random.choice(joke_list)
        joke_id,title,joke = choice_joke
        
        return title, joke
    
    # –ï—Å–ª–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Ü–∏–∫–ª–∞ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Å—Ç—ã, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä—É –ø–µ—á–∞–ª—å–∫—É
    answers = ['–Ø, –ö–û–ù–ï–ß–ù–û, –¢–£–ü–û–ô –†–û–ë–û–¢, –ù–û –¢–ê–ö–û–ô –•–£–ô–ù–ò –î–ê–ñ–ï –Ø –ù–ê–ô–¢–ò –ù–ï –ú–û–ì–£', '–ù–£ –ù–ï –ó–ù–ê–Æ –Ø –¢–ê–ö–û–ì–û –ö–ê–í–≠–≠–ù–ê, –ù–ï –ó–ù–ê –Æ', 'ü§®']
    choise_answer = random.choice(answers)
    
    return '', choise_answer